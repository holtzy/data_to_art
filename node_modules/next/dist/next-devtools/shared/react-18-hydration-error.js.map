{"version":3,"sources":["../../../src/next-devtools/shared/react-18-hydration-error.ts"],"sourcesContent":["import isError from '../../lib/is-error'\n\nexport function isHydrationError(error: unknown): boolean {\n  return (\n    isError(error) &&\n    (error.message ===\n      'Hydration failed because the initial UI does not match what was rendered on the server.' ||\n      error.message === 'Text content does not match server-rendered HTML.')\n  )\n}\n\nexport function isHydrationWarning(message: unknown): message is string {\n  return (\n    isHtmlTagsWarning(message) ||\n    isTextInTagsMismatchWarning(message) ||\n    isTextWarning(message)\n  )\n}\n\ntype NullableText = string | null | undefined\n\n// https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference\nconst htmlTagsWarnings = new Set([\n  'Warning: Expected server HTML to contain a matching <%s> in <%s>.%s',\n  'Warning: Did not expect server HTML to contain a <%s> in <%s>.%s',\n])\nconst textAndTagsMismatchWarnings = new Set([\n  'Warning: Expected server HTML to contain a matching text node for \"%s\" in <%s>.%s',\n  'Warning: Did not expect server HTML to contain the text node \"%s\" in <%s>.%s',\n])\nconst textWarnings = new Set([\n  'Warning: Text content did not match. Server: \"%s\" Client: \"%s\"%s',\n])\n\nexport const getHydrationWarningType = (\n  message: NullableText\n): 'tag' | 'text' | 'text-in-tag' => {\n  if (typeof message !== 'string') {\n    // TODO: Doesn't make sense to treat no message as a hydration error message.\n    // We should bail out somewhere earlier.\n    return 'text'\n  }\n\n  const normalizedMessage = message.startsWith('Warning: ')\n    ? message\n    : `Warning: ${message}`\n\n  if (isHtmlTagsWarning(normalizedMessage)) return 'tag'\n  if (isTextInTagsMismatchWarning(normalizedMessage)) return 'text-in-tag'\n\n  return 'text'\n}\n\nconst isHtmlTagsWarning = (message: unknown) =>\n  typeof message === 'string' && htmlTagsWarnings.has(message)\n\nconst isTextInTagsMismatchWarning = (msg: unknown) =>\n  typeof msg === 'string' && textAndTagsMismatchWarnings.has(msg)\n\nconst isTextWarning = (msg: unknown) =>\n  typeof msg === 'string' && textWarnings.has(msg)\n"],"names":["getHydrationWarningType","isHydrationError","isHydrationWarning","error","isError","message","isHtmlTagsWarning","isTextInTagsMismatchWarning","isTextWarning","htmlTagsWarnings","Set","textAndTagsMismatchWarnings","textWarnings","normalizedMessage","startsWith","has","msg"],"mappings":";;;;;;;;;;;;;;;;IAkCaA,uBAAuB;eAAvBA;;IAhCGC,gBAAgB;eAAhBA;;IASAC,kBAAkB;eAAlBA;;;;kEAXI;AAEb,SAASD,iBAAiBE,KAAc;IAC7C,OACEC,IAAAA,gBAAO,EAACD,UACPA,CAAAA,MAAME,OAAO,KACZ,6FACAF,MAAME,OAAO,KAAK,mDAAkD;AAE1E;AAEO,SAASH,mBAAmBG,OAAgB;IACjD,OACEC,kBAAkBD,YAClBE,4BAA4BF,YAC5BG,cAAcH;AAElB;AAIA,iIAAiI;AACjI,MAAMI,mBAAmB,IAAIC,IAAI;IAC/B;IACA;CACD;AACD,MAAMC,8BAA8B,IAAID,IAAI;IAC1C;IACA;CACD;AACD,MAAME,eAAe,IAAIF,IAAI;IAC3B;CACD;AAEM,MAAMV,0BAA0B,CACrCK;IAEA,IAAI,OAAOA,YAAY,UAAU;QAC/B,6EAA6E;QAC7E,wCAAwC;QACxC,OAAO;IACT;IAEA,MAAMQ,oBAAoBR,QAAQS,UAAU,CAAC,eACzCT,UACA,AAAC,cAAWA;IAEhB,IAAIC,kBAAkBO,oBAAoB,OAAO;IACjD,IAAIN,4BAA4BM,oBAAoB,OAAO;IAE3D,OAAO;AACT;AAEA,MAAMP,oBAAoB,CAACD,UACzB,OAAOA,YAAY,YAAYI,iBAAiBM,GAAG,CAACV;AAEtD,MAAME,8BAA8B,CAACS,MACnC,OAAOA,QAAQ,YAAYL,4BAA4BI,GAAG,CAACC;AAE7D,MAAMR,gBAAgB,CAACQ,MACrB,OAAOA,QAAQ,YAAYJ,aAAaG,GAAG,CAACC","ignoreList":[0]}