{"version":3,"sources":["../../src/server/patch-error-inspect.ts"],"sourcesContent":["import { findSourceMap as nativeFindSourceMap } from 'module'\nimport * as path from 'path'\nimport * as url from 'url'\nimport type * as util from 'util'\nimport { SourceMapConsumer as SyncSourceMapConsumer } from 'next/dist/compiled/source-map'\nimport type { StackFrame } from 'next/dist/compiled/stacktrace-parser'\nimport {\n  type ModernSourceMapPayload,\n  findApplicableSourceMapPayload,\n  ignoreListAnonymousStackFramesIfSandwiched as ignoreListAnonymousStackFramesIfSandwichedGeneric,\n  sourceMapIgnoreListsEverything,\n} from './lib/source-maps'\nimport { parseStack } from './lib/parse-stack'\nimport { getOriginalCodeFrame } from '../next-devtools/server/shared'\nimport { workUnitAsyncStorage } from './app-render/work-unit-async-storage.external'\nimport { dim } from '../lib/picocolors'\n\ntype FindSourceMapPayload = (\n  sourceURL: string\n) => ModernSourceMapPayload | undefined\n// Find a source map using the bundler's API.\n// This is only a fallback for when Node.js fails to due to bugs e.g. https://github.com/nodejs/node/issues/52102\n// TODO: Remove once all supported Node.js versions are fixed.\n// TODO(veil): Set from Webpack as well\nlet bundlerFindSourceMapPayload: FindSourceMapPayload = () => undefined\n\nexport function setBundlerFindSourceMapImplementation(\n  findSourceMapImplementation: FindSourceMapPayload\n): void {\n  bundlerFindSourceMapPayload = findSourceMapImplementation\n}\n\ninterface IgnoreableStackFrame extends StackFrame {\n  ignored: boolean\n}\n\ntype SourceMapCache = Map<\n  string,\n  null | { map: SyncSourceMapConsumer; payload: ModernSourceMapPayload }\n>\n\nfunction frameToString(frame: StackFrame): string {\n  let sourceLocation = frame.lineNumber !== null ? `:${frame.lineNumber}` : ''\n  if (frame.column !== null && sourceLocation !== '') {\n    sourceLocation += `:${frame.column}`\n  }\n\n  let fileLocation: string | null\n  if (\n    frame.file !== null &&\n    frame.file.startsWith('file://') &&\n    URL.canParse(frame.file)\n  ) {\n    // If not relative to CWD, the path is ambiguous to IDEs and clicking will prompt to select the file first.\n    // In a multi-app repo, this leads to potentially larger file names but will make clicking snappy.\n    // There's no tradeoff for the cases where `dir` in `next dev [dir]` is omitted\n    // since relative to cwd is both the shortest and snappiest.\n    fileLocation = path.relative(process.cwd(), url.fileURLToPath(frame.file))\n  } else if (frame.file !== null && frame.file.startsWith('/')) {\n    fileLocation = path.relative(process.cwd(), frame.file)\n  } else {\n    fileLocation = frame.file\n  }\n\n  return frame.methodName\n    ? `    at ${frame.methodName} (${fileLocation}${sourceLocation})`\n    : `    at ${fileLocation}${sourceLocation}`\n}\n\nfunction computeErrorName(error: Error): string {\n  // TODO: Node.js seems to use a different algorithm\n  // class ReadonlyRequestCookiesError extends Error {}` would read `ReadonlyRequestCookiesError: [...]`\n  // in the stack i.e. seems like under certain conditions it favors the constructor name.\n  return error.name || 'Error'\n}\n\nfunction prepareUnsourcemappedStackTrace(\n  error: Error,\n  structuredStackTrace: any[]\n): string {\n  const name = computeErrorName(error)\n  const message = error.message || ''\n  let stack = name + ': ' + message\n  for (let i = 0; i < structuredStackTrace.length; i++) {\n    stack += '\\n    at ' + structuredStackTrace[i].toString()\n  }\n  return stack\n}\n\nfunction shouldIgnoreListGeneratedFrame(file: string): boolean {\n  return file.startsWith('node:') || file.includes('node_modules')\n}\n\nfunction shouldIgnoreListOriginalFrame(file: string): boolean {\n  return file.includes('node_modules')\n}\n\ninterface SourcemappableStackFrame extends StackFrame {\n  file: NonNullable<StackFrame['file']>\n}\n\ninterface SourceMappedFrame {\n  stack: IgnoreableStackFrame\n  // DEV only\n  code: string | null\n}\n\nfunction createUnsourcemappedFrame(\n  frame: SourcemappableStackFrame\n): SourceMappedFrame {\n  return {\n    stack: {\n      arguments: frame.arguments,\n      column: frame.column,\n      file: frame.file,\n      lineNumber: frame.lineNumber,\n      methodName: frame.methodName,\n      ignored: shouldIgnoreListGeneratedFrame(frame.file),\n    },\n    code: null,\n  }\n}\n\nfunction ignoreListAnonymousStackFramesIfSandwiched(\n  sourceMappedFrames: Array<{\n    stack: IgnoreableStackFrame\n    code: string | null\n  }>\n) {\n  return ignoreListAnonymousStackFramesIfSandwichedGeneric(\n    sourceMappedFrames,\n    (frame) => frame.stack.file === '<anonymous>',\n    (frame) => frame.stack.ignored,\n    (frame) => frame.stack.methodName,\n    (frame) => {\n      frame.stack.ignored = true\n    }\n  )\n}\n\n/**\n * @param frame\n * @param sourceMapCache\n * @returns The original frame if not sourcemapped.\n */\nfunction getSourcemappedFrameIfPossible(\n  frame: SourcemappableStackFrame,\n  sourceMapCache: SourceMapCache,\n  inspectOptions: util.InspectOptions\n): {\n  stack: IgnoreableStackFrame\n  code: string | null\n} {\n  const sourceMapCacheEntry = sourceMapCache.get(frame.file)\n  let sourceMapConsumer: SyncSourceMapConsumer\n  let sourceMapPayload: ModernSourceMapPayload\n  if (sourceMapCacheEntry === undefined) {\n    let sourceURL = frame.file\n    // e.g. \"/APP/.next/server/chunks/ssr/[root-of-the-server]__2934a0._.js\"\n    // will be keyed by Node.js as \"file:///APP/.next/server/chunks/ssr/[root-of-the-server]__2934a0._.js\".\n    // This is likely caused by `callsite.toString()` in `Error.prepareStackTrace converting file URLs to paths.\n    if (sourceURL.startsWith('/')) {\n      sourceURL = url.pathToFileURL(frame.file).toString()\n    }\n    let maybeSourceMapPayload: ModernSourceMapPayload | undefined\n    try {\n      const sourceMap = nativeFindSourceMap(sourceURL)\n      maybeSourceMapPayload = sourceMap?.payload\n    } catch (cause) {\n      // We should not log an actual error instance here because that will re-enter\n      // this codepath during error inspection and could lead to infinite recursion.\n      console.error(\n        `${sourceURL}: Invalid source map. Only conformant source maps can be used to find the original code. Cause: ${cause}`\n      )\n      // If loading fails once, it'll fail every time.\n      // So set the cache to avoid duplicate errors.\n      sourceMapCache.set(frame.file, null)\n      // Don't even fall back to the bundler because it might be not as strict\n      // with regards to parsing and then we fail later once we consume the\n      // source map payload.\n      // This essentially avoids a redundant error where we fail here and then\n      // later on consumption because the bundler just handed back an invalid\n      // source map.\n      return createUnsourcemappedFrame(frame)\n    }\n    if (maybeSourceMapPayload === undefined) {\n      maybeSourceMapPayload = bundlerFindSourceMapPayload(sourceURL)\n    }\n\n    if (maybeSourceMapPayload === undefined) {\n      return createUnsourcemappedFrame(frame)\n    }\n    sourceMapPayload = maybeSourceMapPayload\n    try {\n      sourceMapConsumer = new SyncSourceMapConsumer(\n        // @ts-expect-error -- Module.SourceMap['version'] is number but SyncSourceMapConsumer wants a string\n        sourceMapPayload\n      )\n    } catch (cause) {\n      // We should not log an actual error instance here because that will re-enter\n      // this codepath during error inspection and could lead to infinite recursion.\n      console.error(\n        `${sourceURL}: Invalid source map. Only conformant source maps can be used to find the original code. Cause: ${cause}`\n      )\n      // If creating the consumer fails once, it'll fail every time.\n      // So set the cache to avoid duplicate errors.\n      sourceMapCache.set(frame.file, null)\n      return createUnsourcemappedFrame(frame)\n    }\n    sourceMapCache.set(frame.file, {\n      map: sourceMapConsumer,\n      payload: sourceMapPayload,\n    })\n  } else if (sourceMapCacheEntry === null) {\n    // We failed earlier getting the payload or consumer.\n    // Just return an unsourcemapped frame.\n    // Errors will already be logged.\n    return createUnsourcemappedFrame(frame)\n  } else {\n    sourceMapConsumer = sourceMapCacheEntry.map\n    sourceMapPayload = sourceMapCacheEntry.payload\n  }\n\n  const sourcePosition = sourceMapConsumer.originalPositionFor({\n    column: frame.column ?? 0,\n    line: frame.lineNumber ?? 1,\n  })\n\n  const applicableSourceMap = findApplicableSourceMapPayload(\n    frame.lineNumber ?? 0,\n    frame.column ?? 0,\n    sourceMapPayload\n  )\n  let ignored =\n    applicableSourceMap !== undefined &&\n    sourceMapIgnoreListsEverything(applicableSourceMap)\n  if (sourcePosition.source === null) {\n    return {\n      stack: {\n        arguments: frame.arguments,\n        column: frame.column,\n        file: frame.file,\n        lineNumber: frame.lineNumber,\n        methodName: frame.methodName,\n        ignored: ignored || shouldIgnoreListGeneratedFrame(frame.file),\n      },\n      code: null,\n    }\n  }\n\n  // TODO(veil): Upstream a method to sourcemap consumer that immediately says if a frame is ignored or not.\n  if (applicableSourceMap === undefined) {\n    console.error('No applicable source map found in sections for frame', frame)\n  } else if (!ignored && shouldIgnoreListOriginalFrame(sourcePosition.source)) {\n    // Externals may be libraries that don't ship ignoreLists.\n    // This is really taking control away from libraries.\n    // They should still ship `ignoreList` so that attached debuggers ignore-list their frames.\n    // TODO: Maybe only ignore library sourcemaps if `ignoreList` is absent?\n    // Though keep in mind that Turbopack omits empty `ignoreList`.\n    // So if we establish this convention, we should communicate it to the ecosystem.\n    ignored = true\n  } else if (!ignored) {\n    // TODO: O(n^2). Consider moving `ignoreList` into a Set\n    const sourceIndex = applicableSourceMap.sources.indexOf(\n      sourcePosition.source\n    )\n    ignored = applicableSourceMap.ignoreList?.includes(sourceIndex) ?? false\n  }\n\n  const originalFrame: IgnoreableStackFrame = {\n    // We ignore the sourcemapped name since it won't be the correct name.\n    // The callsite will point to the column of the variable name instead of the\n    // name of the enclosing function.\n    // TODO(NDX-531): Spy on prepareStackTrace to get the enclosing line number for method name mapping.\n    methodName: frame.methodName\n      ?.replace('__WEBPACK_DEFAULT_EXPORT__', 'default')\n      ?.replace('__webpack_exports__.', ''),\n    column: sourcePosition.column,\n    file: sourcePosition.source,\n    lineNumber: sourcePosition.line,\n    // TODO: c&p from async createOriginalStackFrame but why not frame.arguments?\n    arguments: [],\n    ignored,\n  }\n\n  /** undefined = not yet computed*/\n  let codeFrame: string | null | undefined\n\n  return Object.defineProperty(\n    {\n      stack: originalFrame,\n      code: null,\n    },\n    'code',\n    {\n      get: () => {\n        if (codeFrame === undefined) {\n          const sourceContent: string | null =\n            sourceMapConsumer.sourceContentFor(\n              sourcePosition.source,\n              /* returnNullOnMissing */ true\n            ) ?? null\n          codeFrame = getOriginalCodeFrame(\n            originalFrame,\n            sourceContent,\n            inspectOptions.colors\n          )\n        }\n        return codeFrame\n      },\n    }\n  )\n}\n\nfunction parseAndSourceMap(\n  error: Error,\n  inspectOptions: util.InspectOptions\n): string {\n  // TODO(veil): Expose as CLI arg or config option. Useful for local debugging.\n  const showIgnoreListed = false\n  // We overwrote Error.prepareStackTrace earlier so error.stack is not sourcemapped.\n  let unparsedStack = String(error.stack)\n  // We could just read it from `error.stack`.\n  // This works around cases where a 3rd party `Error.prepareStackTrace` implementation\n  // doesn't implement the name computation correctly.\n  const errorName = computeErrorName(error)\n\n  let idx = unparsedStack.indexOf('react_stack_bottom_frame')\n  if (idx !== -1) {\n    idx = unparsedStack.lastIndexOf('\\n', idx)\n  } else {\n    idx = unparsedStack.indexOf('react-stack-bottom-frame')\n    if (idx !== -1) {\n      idx = unparsedStack.lastIndexOf('\\n', idx)\n    }\n  }\n  if (idx !== -1 && !showIgnoreListed) {\n    // Cut off everything after the bottom frame since it'll be React internals.\n    unparsedStack = unparsedStack.slice(0, idx)\n  }\n\n  const unsourcemappedStack = parseStack(unparsedStack)\n  const sourceMapCache: SourceMapCache = new Map()\n\n  const sourceMappedFrames: Array<{\n    stack: IgnoreableStackFrame\n    code: string | null\n  }> = []\n  let sourceFrame: null | string = null\n  for (const frame of unsourcemappedStack) {\n    if (frame.file === null) {\n      sourceMappedFrames.push({\n        code: null,\n        stack: {\n          arguments: frame.arguments,\n          column: frame.column,\n          file: frame.file,\n          lineNumber: frame.lineNumber,\n          methodName: frame.methodName,\n          ignored: false,\n        },\n      })\n    } else {\n      const sourcemappedFrame = getSourcemappedFrameIfPossible(\n        // We narrowed this earlier by bailing if `frame.file` is null.\n        frame as SourcemappableStackFrame,\n        sourceMapCache,\n        inspectOptions\n      )\n      sourceMappedFrames.push(sourcemappedFrame)\n\n      // We can determine the sourceframe here.\n      // anonymous frames won't have a sourceframe so we don't need to scan\n      // all stacks again to check if they are sandwiched between ignored frames.\n      if (\n        sourceFrame === null &&\n        // TODO: Is this the right choice?\n        !sourcemappedFrame.stack.ignored &&\n        sourcemappedFrame.code !== null\n      ) {\n        sourceFrame = sourcemappedFrame.code\n      }\n    }\n  }\n\n  ignoreListAnonymousStackFramesIfSandwiched(sourceMappedFrames)\n\n  let sourceMappedStack = ''\n  for (let i = 0; i < sourceMappedFrames.length; i++) {\n    const frame = sourceMappedFrames[i]\n\n    if (!frame.stack.ignored) {\n      sourceMappedStack += '\\n' + frameToString(frame.stack)\n    } else if (showIgnoreListed) {\n      sourceMappedStack += '\\n' + dim(frameToString(frame.stack))\n    }\n  }\n\n  return (\n    errorName +\n    ': ' +\n    error.message +\n    sourceMappedStack +\n    (sourceFrame !== null ? '\\n' + sourceFrame : '')\n  )\n}\n\nfunction sourceMapError(\n  this: void,\n  error: Error,\n  inspectOptions: util.InspectOptions\n): Error {\n  // Create a new Error object with the source mapping applied and then use native\n  // Node.js formatting on the result.\n  const newError =\n    error.cause !== undefined\n      ? // Setting an undefined `cause` would print `[cause]: undefined`\n        new Error(error.message, { cause: error.cause })\n      : new Error(error.message)\n\n  // TODO: Ensure `class MyError extends Error {}` prints `MyError` as the name\n  newError.stack = parseAndSourceMap(error, inspectOptions)\n\n  for (const key in error) {\n    if (!Object.prototype.hasOwnProperty.call(newError, key)) {\n      // @ts-expect-error -- We're copying all enumerable properties.\n      // So they definitely exist on `this` and obviously have no type on `newError` (yet)\n      newError[key] = error[key]\n    }\n  }\n\n  return newError\n}\n\nexport function patchErrorInspectNodeJS(\n  errorConstructor: ErrorConstructor\n): void {\n  const inspectSymbol = Symbol.for('nodejs.util.inspect.custom')\n\n  errorConstructor.prepareStackTrace = prepareUnsourcemappedStackTrace\n\n  // @ts-expect-error -- TODO upstream types\n  // eslint-disable-next-line no-extend-native -- We're not extending but overriding.\n  errorConstructor.prototype[inspectSymbol] = function (\n    depth: number,\n    inspectOptions: util.InspectOptions,\n    inspect: typeof util.inspect\n  ): string {\n    // avoid false-positive dynamic i/o warnings e.g. due to usage of `Math.random` in `source-map`.\n    return workUnitAsyncStorage.exit(() => {\n      const newError = sourceMapError(this, inspectOptions)\n\n      const originalCustomInspect = (newError as any)[inspectSymbol]\n      // Prevent infinite recursion.\n      // { customInspect: false } would result in `error.cause` not using our inspect.\n      Object.defineProperty(newError, inspectSymbol, {\n        value: undefined,\n        enumerable: false,\n        writable: true,\n      })\n      try {\n        return inspect(newError, {\n          ...inspectOptions,\n          depth:\n            (inspectOptions.depth ??\n              // Default in Node.js\n              2) - depth,\n        })\n      } finally {\n        ;(newError as any)[inspectSymbol] = originalCustomInspect\n      }\n    })\n  }\n}\n\nexport function patchErrorInspectEdgeLite(\n  errorConstructor: ErrorConstructor\n): void {\n  const inspectSymbol = Symbol.for('edge-runtime.inspect.custom')\n\n  errorConstructor.prepareStackTrace = prepareUnsourcemappedStackTrace\n\n  // @ts-expect-error -- TODO upstream types\n  // eslint-disable-next-line no-extend-native -- We're not extending but overriding.\n  errorConstructor.prototype[inspectSymbol] = function ({\n    format,\n  }: {\n    format: (...args: unknown[]) => string\n  }): string {\n    // avoid false-positive dynamic i/o warnings e.g. due to usage of `Math.random` in `source-map`.\n    return workUnitAsyncStorage.exit(() => {\n      const newError = sourceMapError(this, {})\n\n      const originalCustomInspect = (newError as any)[inspectSymbol]\n      // Prevent infinite recursion.\n      Object.defineProperty(newError, inspectSymbol, {\n        value: undefined,\n        enumerable: false,\n        writable: true,\n      })\n      try {\n        return format(newError)\n      } finally {\n        ;(newError as any)[inspectSymbol] = originalCustomInspect\n      }\n    })\n  }\n}\n"],"names":["findSourceMap","nativeFindSourceMap","path","url","SourceMapConsumer","SyncSourceMapConsumer","findApplicableSourceMapPayload","ignoreListAnonymousStackFramesIfSandwiched","ignoreListAnonymousStackFramesIfSandwichedGeneric","sourceMapIgnoreListsEverything","parseStack","getOriginalCodeFrame","workUnitAsyncStorage","dim","bundlerFindSourceMapPayload","undefined","setBundlerFindSourceMapImplementation","findSourceMapImplementation","frameToString","frame","sourceLocation","lineNumber","column","fileLocation","file","startsWith","URL","canParse","relative","process","cwd","fileURLToPath","methodName","computeErrorName","error","name","prepareUnsourcemappedStackTrace","structuredStackTrace","message","stack","i","length","toString","shouldIgnoreListGeneratedFrame","includes","shouldIgnoreListOriginalFrame","createUnsourcemappedFrame","arguments","ignored","code","sourceMappedFrames","getSourcemappedFrameIfPossible","sourceMapCache","inspectOptions","sourceMapCacheEntry","get","sourceMapConsumer","sourceMapPayload","sourceURL","pathToFileURL","maybeSourceMapPayload","sourceMap","payload","cause","console","set","map","sourcePosition","originalPositionFor","line","applicableSourceMap","source","sourceIndex","sources","indexOf","ignoreList","originalFrame","replace","codeFrame","Object","defineProperty","sourceContent","sourceContentFor","colors","parseAndSourceMap","showIgnoreListed","unparsedStack","String","errorName","idx","lastIndexOf","slice","unsourcemappedStack","Map","sourceFrame","push","sourcemappedFrame","sourceMappedStack","sourceMapError","newError","Error","key","prototype","hasOwnProperty","call","patchErrorInspectNodeJS","errorConstructor","inspectSymbol","Symbol","for","prepareStackTrace","depth","inspect","exit","originalCustomInspect","value","enumerable","writable","patchErrorInspectEdgeLite","format"],"mappings":"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","ignoreList":[0]}